name: Scrape optional data

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

env:
  GITHUB_TOKEN: ${{ secrets.PAT_AMD }}

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - name: Check out this repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_AMD }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install deps
      run: >-
          python -m pip install --upgrade pip &&
          pip install beautifulsoup4 && pip install requests && pip install markdownify

    - name: Check for AMD optional new versions
      run: |-
        echo "old_link_optional=$(cat configs/link_optional.txt 2>/dev/null || echo '')" >> $GITHUB_ENV
        python clean_optional.py > configs/link_optional.txt
        echo "link_optional=$(cat configs/link_optional.txt)" >> $GITHUB_ENV      
        
    - name: Create beta tag based on link scraped
      run: |-
        beta_tag=$(echo "${{ env.link_optional }}" | grep -oP '\d+\.\d+\.\d+')-beta
        echo "beta_tag=$beta_tag" >> $GITHUB_ENV
    
    - name: Check if Beta Release already exists
      run: |-
        if gh release list --json tagName --jq '.[] | select(.tagName=="${{ env.beta_tag }}")' | grep -q .; then
          echo "Beta release already exist. ignoring..."
          echo "SKIP=true" >> "$GITHUB_ENV"
        fi
        
    - name: Create Version
      if: env.SKIP != 'true'
      run: |-
        version=$(echo "${{ env.link_optional }}" | grep -oP '(version=)|(\d\d\.\d\d?\.\d\d?)' | tr -d "\n" | tr  "."  "-")
        echo "version=$version" >> $GITHUB_ENV 

    - name: Save optional setup
      if: env.SKIP != 'true'
      run:  |-
        curl --create-dirs -O --output-dir "driver" '${{ env.link_optional }}' -K configs/headers.txt --compressed

    - name: Generate new changelog for beta
      if: env.SKIP != 'true'
      run: |-
        python generate_changelog.py ${{ env.version }} > configs/generated_changelog_optional.md

    - name: Create new Beta Release
      if: env.SKIP != 'true'
      run: |-
        gh release create ${{ env.beta_tag }} \
          -t "${{ env.beta_tag }}" \
          -F configs/generated_changelog_optional.md \
          --prerelease
          
        gh release upload ${{ env.beta_tag }} ./driver/*.exe

    - name: Remove driver folder
      if: env.SKIP != 'true'
      run: rm -rf ./driver    

    - name: Commit report
      if: env.SKIP != 'true'
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git add -A
        git commit -m "Latest beta data" || exit 0
        git push origin main
