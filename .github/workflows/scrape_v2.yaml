name: Scrape latest data

on:
  push:
    branches:
      - dev
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

env:
  GITHUB_TOKEN: ${{ secrets.PAT_AMD }}

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - name: Check out this repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_AMD }}

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install deps
      run: >-
          python -m pip install --upgrade pip &&
          pip install beautifulsoup4 requests markdownify

    - name: Check for AMD new versions
      id: check_drivers
      run: python amd_driver_scraper.py --type stable --check-only

    - name: Check if release already exists
      if: steps.check_drivers.outputs.version
      run: |
        echo "Checking if version ${{ steps.check_drivers.outputs.tag }} already exists..."
        if gh release list --json tagName --jq '.[] | select(.tagName=="${{ steps.check_drivers.outputs.tag }}")' | grep -q .; then
          echo "Release already exists. Skipping."
          echo "SKIP=true" >> $GITHUB_ENV
          exit 0
        fi
        echo "No existing release found. Will proceed with download."

    - name: Download drivers and create changelog
      if: steps.check_drivers.outputs.version && env.SKIP != 'true'
      id: download_drivers
      run: python amd_driver_scraper.py --type stable --download

    - name: Create new Release
      if: github.ref != 'refs/heads/dev' && steps.check_drivers.outputs.version && env.SKIP != 'true'
      run: |-
        gh release create ${{ steps.check_drivers.outputs.tag }} \
          -t ${{ steps.check_drivers.outputs.tag }} \
          -F ${{ steps.download_drivers.outputs.changelog }}
        
        gh release upload ${{ steps.check_drivers.outputs.tag }} ./driver/*.exe

    - name: Remove driver folder and changelog
      if: steps.check_drivers.outputs.version && env.SKIP != 'true'
      run: |
        rm -rf ./driver
        rm -f ${{ steps.download_drivers.outputs.changelog }}

    - name: Commit report
      if: github.ref != 'refs/heads/dev' && steps.check_drivers.outputs.version && env.SKIP != 'true'
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git add -A
        timestamp=$(date -u)
        git commit -m "Latest data: ${timestamp}" || exit 0
        git push origin main