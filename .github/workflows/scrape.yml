name: Scrape latest data

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 1 * * *'

env:
  GITHUB_TOKEN: ${{ secrets.PAT_AMD }}

jobs:
  scheduled:
    runs-on: ubuntu-latest
    steps:
    - name: Check out this repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_AMD }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install deps
      run: >-
          python -m pip install --upgrade pip &&
          pip install beautifulsoup4 && pip install requests && pip install markdownify
    - name: Check for AMD new versions
      run: |-
        echo "old_link=$(cat configs/link.txt)" >> $GITHUB_ENV
        python clean.py > configs/link.txt
        echo "link=$(cat configs/link.txt)" >> $GITHUB_ENV
    - name: create new tag based on link scraped
      if: env.link != env.old_link 
      run: |-
        echo "tag=${{ env.link }}" | grep -oP '(tag=)|(\d\d\.\d\d?\.\d\d?)' | tr -d "\n" >> $GITHUB_ENV
    - name: Extract latest stable version
      run: |
        echo "Filtering only stable versions (ignoring pre-releases):"
        tag=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
        
        echo "Latest stable version: $tag"
        echo "latest_tag=$tag" >> $GITHUB_ENV
    
        # Extract version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$tag"
        echo "MAJOR=$MAJOR" >> $GITHUB_ENV
        echo "MINOR=$MINOR" >> $GITHUB_ENV
        echo "PATCH=$PATCH" >> $GITHUB_ENV      
    - name: Prepare link for curl
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: |-
        echo "version=${{ env.link }}" | grep -oP '(version=)|(\d\d\.\d\d?\.\d\d?)' | tr -d "\n" | tr  "."  "-" >> $GITHUB_ENV   
    - name: Fetch link for full setup
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: |-
        python clean_full.py ${{env.version}} > configs/link_full.txt
        echo "link_full=$(cat configs/link_full.txt)" >> $GITHUB_ENV
    - name: Clear link_full_combined.txt
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: echo "" > configs/link_full_combined.txt
    - name: Fetch link for full setup combined(Polaris/Vega + RDNA)
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: |-
        python clean_full_combined.py ${{env.version}} > configs/link_full_combined.txt
        if [ -s configs/link_full_combined.txt ]; then
          echo "link_full_combined=$(cat configs/link_full_combined.txt)" >> $GITHUB_ENV
        fi
    - name: Save new minimal setup
      if: env.link != env.old_link && env.tag != env.latest_tag
      run:  |-
        curl --create-dirs -O --output-dir "driver" '${{ env.link }}' -K configs/headers.txt --compressed
    - name: Save new full setup
      if: env.link != env.old_link && env.tag != env.latest_tag
      run:  |-
        curl --create-dirs -O --output-dir "driver" '${{ env.link_full }}' -K configs/headers.txt --compressed
    - name: Save new full setup combined (Polaris/Vega + RDNA)
      if: env.link != env.old_link && env.tag != env.latest_tag && env.link_full_combined
      run: |-
        curl --create-dirs -O --output-dir "driver" '${{ env.link_full_combined }}' -K configs/headers.txt --compressed
    - name: Generate new changelog
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: |-
        python generate_changelog.py ${{env.version}} > configs/generated_changelog.md
    - name: Create new Release 
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: |-
        gh release create ${{ env.tag }} -t ${{ env.tag }} -F configs/generated_changelog.md
        gh release upload ${{ env.tag }} ./driver/*.exe
    - name: Remove driver folder
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: rm -rf ./driver    
    - name: Commit report
      if: env.link != env.old_link && env.tag != env.latest_tag
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
        git add -A
        timestamp=$(date -u)
        git commit -m "Latest data: ${timestamp}" || exit 0
        git push origin main
  
